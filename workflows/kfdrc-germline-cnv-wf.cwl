cwlVersion: v1.2
class: Workflow
id: kfdrc-germline-cnv-wf
label: Kids First DRC Germline Copy Number Variant Workflow
doc: |
  # Kids First Data Resource Center Germline Copy Number Variant Workflow

  <p align="center">
    <img src="https://github.com/d3b-center/d3b-research-workflows/raw/master/doc/kfdrc-logo-sm.png">
  </p>

  The Kids First Data Resource Center (KFDRC) Germline Copy Number Variant (CNV)
  Workflow is a common workflow language (CWL) implmentation to generate CNV
  calls from an aligned reads BAM or CRAM file. The workflow makes use of
  CNVnator and GATK to call variants.

  ## Relevant Softwares and Versions

  - [CNVnator](https://github.com/abyzovlab/CNVnator): `0.4.1`
  - [GATK](https://github.com/broadinstitute/gatk): `4.2.0.0`

  ### CNVnator

  CNVnator is a read-depth (RD) based method for CNV discovery and genotyping.
  The method is based on combining the established mean-shift approach with
  additional refinements (multiple-bandwidth partitioning and GC correction) to
  broaden the range of discovered CNVs. Overall, for CNVs accessible by RD,
  CNVnator has high sensitivity (86%-96%), low false-discovery rate (3%-20%),
  high genotyping accuracy (93%-95%), and high resolution in breakpoint discovery
  (<200 bp in 90% of cases with high sequencing coverage). Furthermore, CNVnator
  is complementary in a straightforward way to split-read and read-pair
  approaches: It misses CNVs created by retrotransposable elements, but more than
  half of the validated CNVs that it identifies are not detected by split-read or
  read-pair.

  Read more about the software in their paper:
  https://pubmed.ncbi.nlm.nih.gov/21324876/

  ### GATK gCNV

  GATK gCNV is a methodology and suite of software for discovering rare and
  common CNVs from next-generation sequencing (NGS) read-depth (RD) data. In GATK
  gCNV, sequencing bases are modeled via negative-binomial factor analysis, and
  copy-number states and genomic regions of high and low CNV activity are modeled
  using a hierarchical hidden Markov model (HHMM). Automatic differentiation
  variational inference (ADVI) and variational message passing are used to infer
  continuous and discrete latent variables in a principled framework. A
  deterministic annealing protocol is used to deal with the non-convexity of the
  variational objective function.

  Read more about the software in their paper:
  https://github.com/broadinstitute/gatk/blob/master/docs/CNV/germline-cnv-caller-model.pdf

  ## Input Files

  - Universal
      - `aligned_reads`: The germline BAM/CRAM input that has been aligned to a reference genome.
      - `indexed_reference_fasta`: The reference genome fasta (and associated indicies) to which the germline BAM/CRAM was aligned.
      - `intervals/blacklist_intervals`: Intervals to include or exclude from analysis
  - GATK
      - `contig_ploidy_model_tar`: The contig-ploidy model directory generated by the DetermineGermlineContigPloidyCohortMode task in the Cohort workflow.
      - `gcnv_model_tars`: Array of tars of the contig-ploidy model directories generated by the GermlineCNVCallerCohortMode tasks in the Cohort workflow.

  ## Output Files

  - CNVnator
      - `cnvnator_vcf`: Called CNVs in VCF format
      - `cnvnator_called_cnvs`: Called CNVs from `aligned_reads`
      - `cnvnator_average_rd`: Average RD stats
  - GATK
      - `gatk_gcnv_genotyped_intervals_vcfs`: Per sample VCF files provides a detailed listing of the most likely copy-number call for each genomic interval included in the call-set, along with call quality, call genotype, and the phred-scaled posterior probability vector for all integer copy-number states.
      - `gatk_gcnv_genotyped_segments_vcfs`: Per sample VCF files containing coalesced contiguous intervals that share the same copy-number call
      - `gatk_gcnv_denoised_copy_ratios`: Per sample files concatenates posterior means for denoised copy ratios from all the call shards produced by the GermlineCNVCaller

  ## Basic Info
  - [D3b dockerfiles](https://github.com/d3b-center/bixtools)
  - Testing Tools:
      - [Seven Bridges CAVATICA Platform](https://cavatica.sbgenomics.com/)
      - [Common Workflow Language reference implementation (cwltool)](https://github.com/common-workflow-language/cwltool/)

  ## References
  - KFDRC AWS S3 bucket: s3://kids-first-seq-data/broad-references/, s3://kids-first-seq-data/pipeline-references/
  - CAVATICA: https://cavatica.sbgenomics.com/u/kfdrc-harmonization/kf-references/
  - Broad Institute Goolge Cloud: https://console.cloud.google.com/storage/browser/gcp-public-data--broad-references/hg38/v0
requirements:
- class: MultipleInputFeatureRequirement
- class: ScatterFeatureRequirement
- class: SubworkflowFeatureRequirement
- class: StepInputExpressionRequirement
- class: InlineJavascriptRequirement
inputs:
  indexed_reference_fasta:
    type: 'File'
    secondaryFiles:
    - {pattern: '^.dict', required: true}
    - {pattern: '.fai', required: true}
    - {pattern: '.64.alt', required: false}
    - {pattern: '.64.amb', required: true}
    - {pattern: '.64.ann', required: true}
    - {pattern: '.64.bwt', required: true}
    - {pattern: '.64.pac', required: true}
    - {pattern: '.64.sa', required: true}
    doc: |
      The reference genome fasta (and associated indicies) to which the germline BAM was aligned.
    "sbg:fileTypes": "FASTA, FA"
    "sbg:suggestedValue": {class: File, path: 60639014357c3a53540ca7a3, name: Homo_sapiens_assembly38.fasta, secondaryFiles: [{class: File,
          path: 60639019357c3a53540ca7e7, name: Homo_sapiens_assembly38.dict}, {class: File, path: 60639016357c3a53540ca7af, name: Homo_sapiens_assembly38.fasta.fai},
        {class: File, path: 60639019357c3a53540ca7eb, name: Homo_sapiens_assembly38.fasta.64.alt}, {class: File, path: 6063901f357c3a53540ca84d,
          name: Homo_sapiens_assembly38.fasta.64.amb}, {class: File, path: 6063901f357c3a53540ca849, name: Homo_sapiens_assembly38.fasta.64.ann},
        {class: File, path: 6063901d357c3a53540ca81e, name: Homo_sapiens_assembly38.fasta.64.bwt}, {class: File, path: 6063901c357c3a53540ca801,
          name: Homo_sapiens_assembly38.fasta.64.pac}, {class: File, path: 60639015357c3a53540ca7a9, name: Homo_sapiens_assembly38.fasta.64.sa}]}
  aligned_reads: {type: 'File', secondaryFiles: [{pattern: '.bai', required: false}, {pattern: '^.bai', required: false}, {pattern: '.crai',
        required: false}, {pattern: '^.crai', required: false}], doc: "Aligned Reads file(s) from which CNVs will be discovered",
    "sbg:fileTypes": "BAM, CRAM"}
  output_basename: {type: 'string', doc: "String value to use for the basename of all outputs"}
  cnvnator_bin_sizes: {type: 'int[]?', default: [100, 200, 300, 400, 500], doc: "Candidate bin sizes for analysis. Workflow will evaluate
      the bin sizes and select the best performing bin. Bin size should be equal to a whole number of 100 bases (e.g., 2500, 3700,â€¦)"}
  cnvnator_disable_gc_correction: {type: 'boolean?', doc: "Do not to use GC corrected RD signal"}
  contig_ploidy_model_tar: {type: 'File', doc: "The contig-ploidy model directory generated by the DetermineGermlineContigPloidyCohortMode
      task in the Cohort workflow.", "sbg:fileTypes": "TAR.GZ"}
  gcnv_model_tars: {type: 'File[]', doc: "Array of tars of the contig-ploidy model directories generated by the GermlineCNVCallerCohortMode
      tasks in the Cohort workflow.", "sbg:fileTypes": "TAR.GZ"}
  padding: {type: 'int?', doc: "Length (in bp) of the padding regions on each side of the intervals. This must be the same value used
      for all case samples."}
  bin_length: {type: 'int?', doc: "Length (in bp) of the bins. If zero, no binning will be performed."}
  intervals: {type: 'File', doc: "Picard or GATK-style interval list of regions to process. For WGS, this should typically only include
      the chromosomes of interest.", "sbg:fileTypes": "INTERVALS, INTERVAL_LIST, LIST"}
  blacklist_intervals: {type: 'File?', doc: "Picard or GATK-style interval list of regions to ignore.", "sbg:fileTypes": "INTERVALS,
      INTERVAL_LIST, LIST"}
  disabled_read_filters_for_collect_counts: {type: 'string[]?', doc: "Read filters to be disabled before analysis by GATK CollectReadCounts."}
  ploidy_mapping_error_rate: {type: 'float?', doc: "Typical mapping error rate."}
  ploidy_sample_psi_scale: {type: 'float?', doc: "Prior scale of the sample-specific correction to the coverage unexplained variance."}
  gcnv_p_alt: {type: 'float?', doc: "Total prior probability of alternative copy-number states (the reference copy-number is set to
      the contig integer ploidy)"}
  gcnv_cnv_coherence_length: {type: 'float?', doc: "Coherence length of CNV events (in the units of bp)."}
  gcnv_max_copy_number: {type: 'int?', doc: "Highest allowed copy-number state."}
  gcnv_mapping_error_rate: {type: 'float?', doc: "Typical mapping error rate."}
  gcnv_sample_psi_scale: {type: 'float?', doc: "Typical scale of sample-specific correction to the unexplained variance."}
  gcnv_depth_correction_tau: {type: 'float?', doc: "Precision of read depth pinning to its global value."}
  gcnv_copy_number_posterior_expectation_mode: {type: 'string?', doc: "The strategy for calculating copy number posterior expectations
      in the coverage denoising model."}
  gcnv_active_class_padding_hybrid_mode: {type: 'int?', doc: "If copy-number-posterior-expectation-mode is set to HYBRID, CNV-active
      intervals determined at any time will be padded by this value (in the units of bp) in order to obtain the set of intervals on
      which copy number posterior expectation is performed exactly."}
  gcnv_learning_rate: {type: 'float?', doc: "Adamax optimizer learning rate."}
  gcnv_adamax_beta_1: {type: 'float?', doc: "Adamax optimizer first moment estimation forgetting factor."}
  gcnv_adamax_beta_2: {type: 'float?', doc: "Adamax optimizer second moment estimation forgetting factor."}
  gcnv_log_emission_samples_per_round: {type: 'int?', doc: "Log emission samples drawn per round of sampling."}
  gcnv_log_emission_sampling_median_rel_error: {type: 'float?', doc: "Maximum tolerated median relative error in log emission sampling."}
  gcnv_log_emission_sampling_rounds: {type: 'int?', doc: "Log emission maximum sampling rounds."}
  gcnv_max_advi_iter_first_epoch: {type: 'int?', doc: "Maximum ADVI iterations in the first epoch."}
  gcnv_max_advi_iter_subsequent_epochs: {type: 'int?', doc: "Maximum ADVI iterations in subsequent epochs."}
  gcnv_min_training_epochs: {type: 'int?', doc: "Minimum number of training epochs."}
  gcnv_max_training_epochs: {type: 'int?', doc: "Maximum number of training epochs."}
  gcnv_initial_temperature: {type: 'float?', doc: "Initial temperature (for DA-ADVI)."}
  gcnv_num_thermal_advi_iters: {type: 'int?', doc: "Number of thermal ADVI iterations (for DA-ADVI)."}
  gcnv_convergence_snr_averaging_window: {type: 'int?', doc: "Averaging window for calculating training signal-to-noise ratio (SNR)
      for convergence checking."}
  gcnv_convergence_snr_trigger_threshold: {type: 'float?', doc: "The number of ADVI iterations during which the SNR is required to
      stay below the set threshold for convergence."}
  gcnv_convergence_snr_countdown_window: {type: 'int?', doc: "The SNR threshold to be reached before triggering the convergence countdown."}
  gcnv_max_calling_iters: {type: 'int?', doc: "Maximum number of internal self-consistency iterations within each calling step."}
  gcnv_caller_update_convergence_threshold: {type: 'float?', doc: "Maximum tolerated calling update size for convergence."}
  gcnv_caller_internal_admixing_rate: {type: 'float?', doc: "Admixing ratio of new and old called posteriors (between 0 and 1; larger
      values implies using more of the new posterior and less of the old posterior) for internal convergence loops."}
  gcnv_caller_external_admixing_rate: {type: 'float?', doc: "Admixing ratio of new and old called posteriors (between 0 and 1; larger
      values implies using more of the new posterior and less of the old posterior) after convergence."}
  ref_copy_number_autosomal_contigs: {type: 'int?', doc: "Reference copy-number on autosomal intervals."}
  allosomal_contigs_args: {type: 'string[]?', doc: "Contigs to treat as allosomal (i.e. choose their reference copy-number allele
      according to the sample karyotype)."}
  maximum_number_events_per_sample: {type: 'int?', default: 120, doc: "Maximum number of events threshold for doing sample QC (recommended
      for WES is ~100)"}
  cnvnator_extract_cores: {type: 'int?', doc: "Cores to allocate to extract reads"}
  cnvnator_extract_max_memory: {type: 'int?', doc: "Max memory to allocate to extract reads"}
  cnvnator_his_cores: {type: 'int?', doc: "Cores to allocate to rd histogram generation"}
  cnvnator_his_max_memory: {type: 'int?', doc: "Max memory to allocate to rd histogram generation"}
  cnvnator_stat_cores: {type: 'int?', doc: "Cores to allocate to calculate statistics"}
  cnvnator_stat_max_memory: {type: 'int?', doc: "Max memory to allocate to calculate statistics"}
  cnvnator_eval_cores: {type: 'int?', doc: "Cores to allocate to evaluation"}
  cnvnator_eval_max_memory: {type: 'int?', doc: "Max memory to allocate to evaluation"}
  cnvnator_partition_cores: {type: 'int?', doc: "Cores to allocate to partition"}
  cnvnator_partition_max_memory: {type: 'int?', doc: "Max memory to allocate to partition"}
  cnvnator_call_cores: {type: 'int?', doc: "Cores to allocate to call"}
  cnvnator_call_max_memory: {type: 'int?', doc: "Max memory to allocate to call"}
  cnvnator_vcf_cores: {type: 'int?', doc: "Cores to allocate to vcf creation"}
  cnvnator_vcf_max_memory: {type: 'int?', doc: "Max memory to allocate to vcf creation"}
  annotsv_annotations_dir: {type: 'File', doc: "TAR.GZ'd Directory containing AnnotSV\
      \ annotations", "sbg:fileTypes": "TAR, TAR.GZ, TGZ", "sbg:suggestedValue": {
      class: File, path: 6245fde8274f85577d646da0, name: annotsv_311_annotations_dir.tgz}}
  annotsv_genome_build:
    type:
    - 'null'
    - type: enum
      name: annotsv_genome_build
      symbols: ["GRCh37", "GRCh38", "mm9", "mm10"]
    doc: |
      The genome build of the reference fasta. AnnotSV is capable of annotating the following genomes: "GRCh37","GRCh38","mm9","mm10".
  gatk_preprocess_intervals_max_memory: {type: 'int?', doc: "GB of RAM to allocate to preprocess intervals"}
  gatk_preprocess_intervals_cores: {type: 'int?', doc: "Minimum reserved number of CPU cores for preprocess intervals"}
  gatk_collect_read_counts_max_memory: {type: 'int?', doc: "GB of RAM to allocate to collect read counts"}
  gatk_collect_read_counts_cores: {type: 'int?', doc: "Minimum reserved number of CPU cores for collect read counts"}
  gatk_dgcp_max_memory: {type: 'int?', doc: "GB of RAM to allocate to determine germline contig ploidy"}
  gatk_dgcp_cores: {type: 'int?', doc: "Minimum reserved number of CPU cores for determine germline contig ploidy"}
  gatk_scatter_intervals_max_memory: {type: 'int?', doc: "GB of RAM to allocate to scatter intervals"}
  gatk_scatter_intervals_cores: {type: 'int?', doc: "Minimum reserved number of CPU cores for scatter intervals"}
  gatk_germline_cnv_caller_max_memory: {type: 'int?', doc: "GB of RAM to allocate to gCNV caller"}
  gatk_germline_cnv_caller_cores: {type: 'int?', doc: "Minimum reserved number of CPU cores for gCNV caller"}
  gatk_postprocess_max_memory: {type: 'int?', doc: "GB of RAM to allocate to postprocess gCNV"}
  gatk_postprocess_cores: {type: 'int?', doc: "Minimum reserved number of CPU cores for postprocess gCNV"}
  gatk_collect_sample_metrics_ram: {type: 'int?', doc: "GB of RAM to allocate to collect sample metrics"}
  gatk_collect_sample_metrics_cores: {type: 'int?', doc: "Minimum reserved number of CPU cores for collect sample metrics"}
  gatk_scatter_ploidy_calls_ram: {type: 'int?', doc: "GB of RAM to allocate to scatter ploidy calls"}
  gatk_scatter_ploidy_calls_cores: {type: 'int?', doc: "Minimum reserved number of CPU cores for scatter ploidy calls"}
  run_gatk_gcnv: {type: 'boolean?', default: true, doc: "Run the GATK Germline CNV module?"}
  run_cnvnator: {type: 'boolean?', default: true, doc: "Run the CNVnator module?"}
outputs:
  gatk_gcnv_read_counts_entity_ids: {type: 'string[]?', outputSource: gatk_gcnv_case/read_counts_entity_ids, doc: "List of file basename
      that were processed by CollectReadCounts"}
  gatk_gcnv_genotyped_intervals_vcfs: {type: 'File[]?', outputSource: gatk_gcnv_case/genotyped_intervals_vcfs, doc: "Per sample VCF
      files provides a detailed listing of the most likely copy-number call for each genomic interval included in the call-set, along
      with call quality, call genotype, and the phred-scaled posterior probability vector for all integer copy-number states."}
  gatk_gcnv_genotyped_segments_vcfs: {type: 'File[]?', outputSource: gatk_gcnv_case/genotyped_segments_vcfs, doc: "Per sample VCF
      files containing coalesced contiguous intervals that share the same copy-number call"}
  gatk_gcnv_denoised_copy_ratios: {type: 'File[]?', outputSource: gatk_gcnv_case/denoised_copy_ratios, doc: "Per sample files concatenates
      posterior means for denoised copy ratios from all the call shards produced by the GermlineCNVCaller."}
  gatk_gcnv_sample_qc_status_strings: {type: 'string[]?', outputSource: gatk_gcnv_case/sample_qc_status_strings, doc: "String value
      contained within the sample_qc_status_files outputs"}
  cnvnator_vcf: {type: 'File?', outputSource: cnvnator/vcf, doc: "Called CNVs in VCF format"}
  cnvnator_annotated_cnvs: {type: 'File?', outputSource: annotsv_cnvnator/annotated_calls, doc: "TSV containing annotated variants
      from the cnvnator_vcf output" }
  cnvnator_called_cnvs: {type: 'File?', outputSource: cnvnator/called_cnvs, doc: "Called CNVs from aligned_reads"}
  cnvnator_average_rd: {type: 'File?', outputSource: cnvnator/average_rd, doc: "Average RD stats"}
steps:
  file_to_file_array:
    hints:
    - class: sbg:AWSInstanceType
      value: c5.9xlarge
    run: ../tools/file_to_file_array.cwl
    when: $(inputs.run_gatk_gcnv || inputs.run_cnvnator)
    in:
      run_gatk_gcnv: run_gatk_gcnv
      run_cnvnator: run_cnvnator
      in_file: aligned_reads
    out: [out_file_array]
  gatk_gcnv_case:
    run: ../workflows/kfdrc-gatk-gcnv-case-workflow.cwl
    when: $(inputs.run_gatk_gcnv)
    in:
      run_gatk_gcnv: run_gatk_gcnv
      normal_reads: file_to_file_array/out_file_array
      output_basenames:
        source: output_basename
        valueFrom: |
          $(self != null ? [self] : null)
      indexed_reference_fasta: indexed_reference_fasta
      intervals: intervals
      blacklist_intervals: blacklist_intervals
      padding: padding
      bin_length: bin_length
      contig_ploidy_model_tar: contig_ploidy_model_tar
      gcnv_model_tars: gcnv_model_tars
      disabled_read_filters_for_collect_counts: disabled_read_filters_for_collect_counts
      ploidy_mapping_error_rate: ploidy_mapping_error_rate
      ploidy_sample_psi_scale: ploidy_sample_psi_scale
      gcnv_p_alt: gcnv_p_alt
      gcnv_cnv_coherence_length: gcnv_cnv_coherence_length
      gcnv_max_copy_number: gcnv_max_copy_number
      gcnv_mapping_error_rate: gcnv_mapping_error_rate
      gcnv_sample_psi_scale: gcnv_sample_psi_scale
      gcnv_depth_correction_tau: gcnv_depth_correction_tau
      gcnv_copy_number_posterior_expectation_mode: gcnv_copy_number_posterior_expectation_mode
      gcnv_active_class_padding_hybrid_mode: gcnv_active_class_padding_hybrid_mode
      gcnv_learning_rate: gcnv_learning_rate
      gcnv_adamax_beta_1: gcnv_adamax_beta_1
      gcnv_adamax_beta_2: gcnv_adamax_beta_2
      gcnv_log_emission_samples_per_round: gcnv_log_emission_samples_per_round
      gcnv_log_emission_sampling_median_rel_error: gcnv_log_emission_sampling_median_rel_error
      gcnv_log_emission_sampling_rounds: gcnv_log_emission_sampling_rounds
      gcnv_max_advi_iter_first_epoch: gcnv_max_advi_iter_first_epoch
      gcnv_max_advi_iter_subsequent_epochs: gcnv_max_advi_iter_subsequent_epochs
      gcnv_min_training_epochs: gcnv_min_training_epochs
      gcnv_max_training_epochs: gcnv_max_training_epochs
      gcnv_initial_temperature: gcnv_initial_temperature
      gcnv_num_thermal_advi_iters: gcnv_num_thermal_advi_iters
      gcnv_convergence_snr_averaging_window: gcnv_convergence_snr_averaging_window
      gcnv_convergence_snr_trigger_threshold: gcnv_convergence_snr_trigger_threshold
      gcnv_convergence_snr_countdown_window: gcnv_convergence_snr_countdown_window
      gcnv_max_calling_iters: gcnv_max_calling_iters
      gcnv_caller_update_convergence_threshold: gcnv_caller_update_convergence_threshold
      gcnv_caller_internal_admixing_rate: gcnv_caller_internal_admixing_rate
      gcnv_caller_external_admixing_rate: gcnv_caller_external_admixing_rate
      ref_copy_number_autosomal_contigs: ref_copy_number_autosomal_contigs
      allosomal_contigs_args: allosomal_contigs_args
      maximum_number_events_per_sample: maximum_number_events_per_sample
      preprocess_intervals_max_memory: gatk_preprocess_intervals_max_memory
      preprocess_intervals_cores: gatk_preprocess_intervals_cores
      collect_read_counts_max_memory: gatk_collect_read_counts_max_memory
      collect_read_counts_cores: gatk_collect_read_counts_cores
      dgcp_max_memory: gatk_dgcp_max_memory
      dgcp_cores: gatk_dgcp_cores
      scatter_intervals_max_memory: gatk_scatter_intervals_max_memory
      scatter_intervals_cores: gatk_scatter_intervals_cores
      germline_cnv_caller_max_memory: gatk_germline_cnv_caller_max_memory
      germline_cnv_caller_cores: gatk_germline_cnv_caller_cores
      postprocess_max_memory: gatk_postprocess_max_memory
      postprocess_cores: gatk_postprocess_cores
      collect_sample_metrics_ram: gatk_collect_sample_metrics_ram
      collect_sample_metrics_cores: gatk_collect_sample_metrics_cores
      scatter_ploidy_calls_ram: gatk_scatter_ploidy_calls_ram
      scatter_ploidy_calls_cores: gatk_scatter_ploidy_calls_cores
    out: [preprocessed_intervals, read_counts_entity_ids, read_counts, sample_contig_ploidy_calls_tars, gcnv_calls_tars, gcnv_tracking_tars,
      genotyped_intervals_vcfs, genotyped_segments_vcfs, denoised_copy_ratios, sample_qc_status_files, sample_qc_status_strings]
  awk_parse_interval_list_contigs:
    run: ../tools/awk_parse_interval_list_contigs.cwl
    when: $(inputs.run_cnvnator)
    in:
      run_cnvnator: run_cnvnator
      input_intervals: intervals
    out: [contigs]
  cnvnator:
    run: ../workflows/kfdrc-cnvnator-wf.cwl
    when: $(inputs.run_cnvnator)
    in:
      run_cnvnator: run_cnvnator
      aligned_reads: file_to_file_array/out_file_array
      reference_fasta: indexed_reference_fasta
      output_basename: output_basename
      calling_contigs: awk_parse_interval_list_contigs/contigs
      bin_sizes: cnvnator_bin_sizes
      disable_gc_correction: cnvnator_disable_gc_correction
      extract_cores: cnvnator_extract_cores
      extract_max_memory: cnvnator_extract_max_memory
      his_cores: cnvnator_his_cores
      his_max_memory: cnvnator_his_max_memory
      stat_cores: cnvnator_stat_cores
      stat_max_memory: cnvnator_stat_max_memory
      eval_cores: cnvnator_eval_cores
      eval_max_memory: cnvnator_eval_max_memory
      partition_cores: cnvnator_partition_cores
      partition_max_memory: cnvnator_partition_max_memory
      call_cores: cnvnator_call_cores
      call_max_memory: cnvnator_call_max_memory
      vcf_cores: cnvnator_vcf_cores
      vcf_max_memory: cnvnator_vcf_max_memory
    out: [vcf, called_cnvs, average_rd]
  annotsv_cnvnator:
    run: ../tools/annotsv.cwl
    when: $(inputs.run_cnvnator)
    in:
      run_cnvnator: run_cnvnator
      annotations_dir_tgz: annotsv_annotations_dir
      sv_input_file: cnvnator/vcf
      genome_build: annotsv_genome_build
    out: [annotated_calls, unannotated_calls]
hints:
- class: "sbg:maxNumberOfParallelInstances"
  value: 2
$namespaces:
  sbg: https://sevenbridges.com
"sbg:license": Apache License 2.0
"sbg:publisher": KFDRC
"sbg:categories":
- CNV
- CNVNATOR
- GATK
- GERMLINE
- VCF
"sbg:links":
- id: 'https://github.com/kids-first/kf-germline-workflow/releases/tag/v1.2.0'
  label: github-release
